{"version":3,"sources":["components/Statistics/Statistics.module.css","components/FeedbackOptions/FeedbackOptions.module.css","components/Notification/Notification.module.css","components/Section/Section.js","components/FeedbackOptions/FeedbackOptions.js","components/Notification/Notification.js","components/Statistics/Statistics.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Section","children","FeedbackOptions","options","onLeaveFeedback","className","s","title","map","option","button","onClick","Notification","message","description","Statistics","good","neutral","bad","total","positivePercentage","value","isNaN","App","useState","setGood","setNeutral","setBad","countTotalFeedback","prevState","Error","Math","round","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0IACAA,EAAOC,QAAU,CAAC,MAAQ,0BAA0B,YAAc,gCAAgC,MAAQ,4B,mBCA1GD,EAAOC,QAAU,CAAC,MAAQ,+BAA+B,OAAS,kC,iBCAlED,EAAOC,QAAU,CAAC,YAAc,oC,+ICGjBC,EAJC,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACjB,OAAO,kCAAUA,K,gBC4BJC,EA1BS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OACE,qCACE,oBAAIC,UAAWC,IAAEC,MAAjB,mCACCJ,EAAQK,KAAI,SAAAC,GACX,OACE,wBACEJ,UAAWC,IAAEI,OAEbC,QAAS,WACPP,EAAgBK,IAJpB,SAOGA,GALIA,U,gBCAFG,EARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,mBAAGR,UAAWC,IAAEQ,YAAhB,SAA8BD,K,gBCgCxBE,EAjCI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,qCACE,oBAAIf,UAAWC,IAAEC,MAAjB,wBACA,oBAAGF,UAAWC,IAAEQ,YAAhB,kBACO,sBAAMT,UAAWC,IAAEe,MAAnB,SAA2BL,OAElC,oBAAGX,UAAWC,IAAEQ,YAAhB,qBACU,sBAAMT,UAAWC,IAAEe,MAAnB,SAA2BJ,OAErC,oBAAGZ,UAAWC,IAAEQ,YAAhB,iBACM,sBAAMT,UAAWC,IAAEe,MAAnB,SAA2BH,OAEjC,oBAAGb,UAAWC,IAAEQ,YAAhB,mBACQ,sBAAMT,UAAWC,IAAEe,MAAnB,SAA2BF,QAEjCG,MAAMF,IACN,oBAAGf,UAAWC,IAAEQ,YAAhB,+BACoB,uBAAMT,UAAWC,IAAEe,MAAnB,UAA2BD,EAA3B,cCoCbG,EAlDH,WACV,MAAwBC,mBAAS,GAAjC,mBAAOR,EAAP,KAAaS,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOP,EAAP,KAAgBS,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAON,EAAP,KAAYS,EAAZ,KAkBMC,EAAqB,WACzB,OAAOZ,EAAOC,EAAUC,GAO1B,OACE,qBAAKb,UAAU,MAAf,SACE,eAAC,EAAD,WACE,6EACA,cAAC,EAAD,CAAiBF,QAAS,CAAC,OAAQ,UAAW,OAAQC,gBA5BpC,SAAAK,GACtB,OAAQA,GACN,IAAK,OACHgB,GAAQ,SAAAI,GAAS,OAAIA,EAAY,KACjC,MACF,IAAK,UACHH,GAAW,SAAAG,GAAS,OAAIA,EAAY,KACpC,MACF,IAAK,MACHF,GAAO,SAAAE,GAAS,OAAIA,EAAY,KAChC,MACF,QACE,MAAM,IAAIC,MAAM,sBAiBU,IAAzBF,IACC,cAAC,EAAD,CAAcf,QAAS,yBAEvB,cAAC,EAAD,CACEG,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOS,IACPR,mBAhBDW,KAAKC,MAAO,IAAMhB,EAAQY,aCrBtBK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.976aa18c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Statistics_title__rtVdF\",\"description\":\"Statistics_description__2M3GY\",\"value\":\"Statistics_value__2noiS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"FeedbackOptions_title__2DWnm\",\"button\":\"FeedbackOptions_button__3-c1I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"description\":\"Notification_description__2Tmyl\"};","const Section = ({ children }) => {\n  return <section>{children}</section>;\n};\n\nexport default Section;\n","import PropTypes from 'prop-types';\nimport s from './FeedbackOptions.module.css';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return (\n    <>\n      <h2 className={s.title}>Please leave feedback</h2>\n      {options.map(option => {\n        return (\n          <button\n            className={s.button}\n            key={option}\n            onClick={() => {\n              onLeaveFeedback(option);\n            }}\n          >\n            {option}\n          </button>\n        );\n      })}\n    </>\n  );\n};\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import { PropTypes } from 'prop-types';\nimport s from './Notification.module.css';\n\nconst Notification = ({ message }) => {\n  return <p className={s.description}>{message}</p>;\n};\n\nNotification.propTypes = {\n  message: PropTypes.string,\n};\n\nexport default Notification;\n","import PropTypes from 'prop-types';\nimport s from './Statistics.module.css';\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\n  return (\n    <>\n      <h2 className={s.title}>Statistics</h2>\n      <p className={s.description}>\n        Good:<span className={s.value}>{good}</span>\n      </p>\n      <p className={s.description}>\n        Neutral:<span className={s.value}>{neutral}</span>\n      </p>\n      <p className={s.description}>\n        Bad:<span className={s.value}>{bad}</span>\n      </p>\n      <p className={s.description}>\n        Total:<span className={s.value}>{total}</span>\n      </p>\n      {!isNaN(positivePercentage) && (\n        <p className={s.description}>\n          Positive feedback:<span className={s.value}>{positivePercentage}%</span>\n        </p>\n      )}\n    </>\n  );\n};\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n\nexport default Statistics;\n","import './App.css';\nimport Section from './components/Section';\nimport FeedbackOptions from './components/FeedbackOptions';\nimport Notification from './components/Notification';\nimport Statistics from './components/Statistics';\nimport { useState } from 'react';\n\nconst App = () => {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const onLeaveFeedback = option => {\n    switch (option) {\n      case 'Good':\n        setGood(prevState => prevState + 1);\n        break;\n      case 'Neutral':\n        setNeutral(prevState => prevState + 1);\n        break;\n      case 'Bad':\n        setBad(prevState => prevState + 1);\n        break;\n      default:\n        throw new Error('Unknown option');\n    }\n  };\n\n  const countTotalFeedback = () => {\n    return good + neutral + bad;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    return Math.round((100 * good) / countTotalFeedback());\n  };\n\n  return (\n    <div className=\"App\">\n      <Section>\n        <h1>Welcome to feedback statistics application!</h1>\n        <FeedbackOptions options={['Good', 'Neutral', 'Bad']} onLeaveFeedback={onLeaveFeedback} />\n        {countTotalFeedback() === 0 ? (\n          <Notification message={'There is no feedback'} />\n        ) : (\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={countTotalFeedback()}\n            positivePercentage={countPositiveFeedbackPercentage()}\n          />\n        )}\n      </Section>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}